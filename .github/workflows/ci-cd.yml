name: Deploy na AWS (ECS)

on:
  push:
    branches: [ develop ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_URI }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE_NAME }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, e push da imagem para o ECR
        id: build-image
        run: |
          # Gera a tag da imagem usando o hash do commit
          IMAGE_TAG=${{ github.sha }}
          
          # Constrói a imagem Docker. Use o Dockerfile correto com -f
          docker build -f Dockerfile.emulator -t $ECR_REPOSITORY:$IMAGE_TAG .
          
          # Envia a imagem para o ECR
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          
          # Exporta a nova tag de imagem para os próximos passos
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fazer deploy no Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FAMILY }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          image: ${{ steps.build-image.outputs.image }}
          wait-for-service-stability: true